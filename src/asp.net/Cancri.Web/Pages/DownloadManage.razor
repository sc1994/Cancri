@using Microsoft.Extensions.Logging;
@using Cancri.Dto.FileService;
@using System.Web;
@using Cancri.Web.Store;
@using System.Linq;

@page "/download-manage"
@inject ILogger<DownloadManage> logger;
@inject DownloadManageStore store;
@inject HttpClient request;

<PageContainer Title="下载管理">
    <AntDesign.Breadcrumb>
        @foreach (var item in breadcrumbs)
        {
            <AntDesign.BreadcrumbItem>
                <AntDesign.Button Type="link" OnClick="()=>GotoFolder(item.Key)">@item.Value</AntDesign.Button>
            </AntDesign.BreadcrumbItem>
        }
    </AntDesign.Breadcrumb>
    <br />
    <AntDesign.Table DataSource="@fileList" PageSize="9999">
        <AntDesign.Column @bind-Field="context.Name">
            @if (context.IsFolder)
            {
                <AntDesign.Button Type="link" OnClick="()=>GotoFolder(context.Name)">@context.Name</AntDesign.Button>
            }
            else
            {
                <span>@context.Name</span>
            }
        </AntDesign.Column>
        <AntDesign.Column @bind-Field="context.Size" Width="80"></AntDesign.Column>
        <AntDesign.Column @bind-Field="context.CreateTime" Width="180"></AntDesign.Column>
        <AntDesign.Column @bind-Field="context.LastWriteTime" Width="180"></AntDesign.Column>
    </AntDesign.Table>

</PageContainer>

@code{
    IEnumerable<FileItemDto> fileList = new List<FileItemDto>();
    Dictionary<string, string> breadcrumbs = new Dictionary<string, string>();

    private async Task GotoFolder(string fileName)
    {
        this.logger.LogInformation("goto folder: " + fileName);

        var path = await this.store.GetCurrentPath();
        if (fileName == "../")
        {
            var tmpArr = path.Split('/');
            path = string.Join("/", tmpArr.Take(tmpArr.Length - 1));
        }
        else
        {
            path += "/" + fileName;
        }
        await this.SetFileList(path);
    }

    protected override async Task OnInitializedAsync()
    {
        this.logger.LogInformation(await this.store.GetCurrentPath());
        this.logger.LogInformation(await this.store.GetRootPath());

        var currentPath = await this.store.GetCurrentPath();
        if (string.IsNullOrWhiteSpace(currentPath))
        {
            currentPath = await this.store.GetRootPath();
        }

        this.logger.LogInformation("OnInitializedAsync:获取上次的访问路径:{0}", currentPath);

        await this.SetFileList(currentPath);

        await base.OnInitializedAsync();
    }

    private async Task SetFileList(string path)
    {
        this.logger.LogInformation(path);

        breadcrumbs.Clear();
        var tmpPath = "";
        foreach (var item in path.Split(new[] { '\\', '/' }))
        {
            tmpPath += item;
            breadcrumbs.Add(tmpPath, item);
            tmpPath += "/";
            this.logger.LogInformation(tmpPath);
        }

        var res = await this.request.GetAsync($"/api/file?path={HttpUtility.UrlEncode(path)}");
        var data = await res.Content.ReadFromJsonAsync<List<FileItemDto>>();

        if (true) // TODO 请求成功的情况下 才设置缓存
        {
            await this.store.SetCurrentPath(path);
        }

        if (!await IsRootPath(path))
        {
            data.Insert(0, new FileItemDto
            {
                Name = "../",
                IsFolder = true
            });
        }
        this.fileList = data;
    }

    private async Task<bool> IsRootPath(string path)
    {
        return path == await this.store.GetRootPath();
    }
}